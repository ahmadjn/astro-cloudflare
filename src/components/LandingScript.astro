---
// Landing Script Component
// Handles complex ad loading and presentation logic
---

<script>
  (function () {
    "use strict";

    // ===================================================================================
    // MODULE: CONFIGURATION
    // ===================================================================================
    const config = {
      LOADING_DURATION: 8000,
      LOADING_INTERVAL: 50,
      ADX_SLOT_ID: "admanager-display-ad",
      RETRY_TIMEOUTS: [5000, 3000, 3000],
      BACK_URL_1: "/premium-access?gad_source=5",
      AD_ANIMATION_DURATION: 3000, // Durasi loading progress bagian 2 (ms)
    };

    const state = {
      progress: 0,
      progressInterval: null,
      decisionMade: false,
      winningAdElement: null,
      adxAttemptCount: 0,
      adxRetryTimer: null,
      adSlotObject: null,
    };

    const elements = {
      body: null,
      loadingBackdrop: null,
      loadingScreenPart1: null,
      loadingScreenPart2: null,
      progressBar: null,
      progressText: null,
      loadingTitle: null,
      startButton: null,
      adxContainer: null,
      mainWrapper: null,
    };

    // ===================================================================================
    // MODULE: Ad Management
    // ===================================================================================
    const adManager = {
      init() {
        if (typeof googletag === "undefined" || !googletag.cmd) {
          console.error("Google Publisher Tag (GPT.js) not loaded.");
          loadingScreen.init();
          return;
        }
        googletag.cmd.push(() => {
          const allSlots = googletag.pubads().getSlots();
          state.adSlotObject = allSlots.find(
            (slot) => slot.getSlotElementId() === config.ADX_SLOT_ID
          );
          if (!state.adSlotObject) {
            console.error(`Ad slot with ID '${config.ADX_SLOT_ID}' not found.`);
            return;
          }
          googletag
            .pubads()
            .addEventListener(
              "slotRenderEnded",
              this.handleSlotRender.bind(this)
            );
          this.startAttemptTimeout();
        });
      },

      handleSlotRender(event) {
        if (
          state.decisionMade ||
          event.slot.getSlotElementId() !== config.ADX_SLOT_ID
        )
          return;
        clearTimeout(state.adxRetryTimer);
        state.adxAttemptCount++;

        if (!event.isEmpty) {
          console.log(
            `%c[ADS] AdX FILLED on attempt #${state.adxAttemptCount}.`,
            "color: #90ee90;"
          );
          state.winningAdElement = elements.adxContainer;
          state.decisionMade = true;
          if (window.notifyAdLoaded) window.notifyAdLoaded();
        } else {
          console.log(
            `%c[ADS] AdX UNFILLED on attempt #${state.adxAttemptCount}.`,
            "color: #ffb6c1;"
          );
          this.tryNextAttempt();
        }
      },

      tryNextAttempt() {
        if (state.adxAttemptCount >= config.RETRY_TIMEOUTS.length) {
          console.error("All ad retry attempts failed.");
          if (elements.adxContainer)
            elements.adxContainer.style.display = "none";
          state.decisionMade = true;
          if (state.progress < 100) {
            window.notifyAdLoaded(true); // Kirim flag gagal
          }
          return;
        }
        this.startAttemptTimeout();
        googletag.pubads().refresh([state.adSlotObject]);
      },

      startAttemptTimeout() {
        const currentAttemptIndex = state.adxAttemptCount;
        const timeoutDuration = config.RETRY_TIMEOUTS[currentAttemptIndex];
        state.adxRetryTimer = setTimeout(() => {
          console.warn(`Ad attempt #${currentAttemptIndex + 1} TIMED OUT.`);
          state.adxAttemptCount++;
          this.tryNextAttempt();
        }, timeoutDuration);
      },

      startAdPresentation() {
        if (!state.winningAdElement) return;
        console.log("[ADS] Starting Presentation (Part 2)...");
        this.positionAdInCenter(state.winningAdElement);
        loadingScreen.showPart2();
        setTimeout(() => {
          this.finalizeAdPosition(state.winningAdElement);
        }, config.AD_ANIMATION_DURATION);
      },

      positionAdInCenter(targetElement) {
        console.log("[ADS] Positioning ad in center.");
        window.scrollTo(0, 0);
        targetElement.style.position = "fixed";
        targetElement.style.top = "50%";
        targetElement.style.left = "50%";
        targetElement.style.transform = "translate(-50%, -50%)";
        targetElement.style.opacity = "1";
        targetElement.style.zIndex = "99999";
        targetElement.style.transition = "opacity 0.3s ease";
      },

      finalizeAdPosition(targetElement) {
        console.log("[ADS] Finalizing ad position.");
        loadingScreen.hideAll();
        window.scrollTo(0, 0);

        if (!elements.startButton) {
          console.error("Start button not found for final positioning.");
          targetElement.style.opacity = "0";
          return;
        }

        const startButtonRect = elements.startButton.getBoundingClientRect();
        const targetRect = targetElement.getBoundingClientRect();
        const newStartHeight = startButtonRect.height / 2;
        const newTargetHeight = targetRect.height / 2.2;
        const finalY = startButtonRect.top + newStartHeight - newTargetHeight;

        targetElement.style.top = `${finalY}px`;
        targetElement.style.transform = "translateX(-50%)";
        targetElement.style.opacity = "0";
        targetElement.style.transition =
          "opacity 0.5s ease-out, top 0.5s ease-out";
      },
    };

    // ===================================================================================
    // MODULE: Loading Screen Management
    // ===================================================================================
    const loadingScreen = {
      init() {
        const increment =
          100 / (config.LOADING_DURATION / config.LOADING_INTERVAL);
        state.progressInterval = setInterval(
          () => this.updateProgress(increment),
          config.LOADING_INTERVAL
        );
      },

      updateProgress(increment) {
        if (state.progress >= 100) return;
        state.progress += increment;
        if (state.progress > 100) state.progress = 100;

        if (elements.progressBar)
          elements.progressBar.style.width = state.progress + "%";
        if (elements.progressText)
          elements.progressText.innerHTML = `${Math.floor(state.progress)}%`;

        if (state.progress >= 100) {
          if (elements.loadingTitle)
            elements.loadingTitle.textContent = "Timeout";
          this.finish(true); // Finish karena timeout
        }
      },

      finish(isTimeout = false) {
        clearInterval(state.progressInterval);

        if (!isTimeout && state.winningAdElement) {
          console.log(
            "Loading Part 1 Finished. Ad is filled. Starting Part 2."
          );
          elements.loadingScreenPart1.classList.add("hiding");
          setTimeout(() => {
            elements.loadingScreenPart1.style.display = "none";
            adManager.startAdPresentation();
          }, 800);
        } else {
          console.log(
            "Loading Part 1 Finished. Ad failed or timed out. Cleaning up."
          );
          this.hideAll();
          if (elements.adxContainer)
            elements.adxContainer.style.display = "none";
          if (elements.body) elements.body.style.overflow = "auto";
          if (elements.mainWrapper)
            elements.mainWrapper.style.overflow = "visible";
        }
      },

      showPart2() {
        if (elements.loadingScreenPart2) {
          elements.loadingScreenPart2.style.display = "block";
          return;
        }
        this.createPart2();
      },

      hideAll() {
        if (elements.loadingBackdrop)
          elements.loadingBackdrop.style.display = "none";
        if (elements.loadingScreenPart1)
          elements.loadingScreenPart1.style.display = "none";
        if (elements.loadingScreenPart2)
          elements.loadingScreenPart2.style.display = "none";
      },

      createBackdrop() {
        const backdrop = document.createElement("div");
        backdrop.id = "loading-backdrop";
        backdrop.style.position = "fixed";
        backdrop.style.top = "0";
        backdrop.style.left = "0";
        backdrop.style.width = "100vw";
        backdrop.style.height = "100vh";
        backdrop.style.zIndex = "99997"; // Di bawah semua loading screen
        backdrop.style.backgroundColor = "rgba(10, 10, 10, 0.85)";
        backdrop.style.backdropFilter = "blur(8px)";
        backdrop.style.webkitBackdropFilter = "blur(8px)";
        elements.body.appendChild(backdrop);
        elements.loadingBackdrop = backdrop;
      },

      createPart2() {
        const container = document.createElement("div");
        container.className = "loading-container-part2";
        container.innerHTML = `
            <div class="border-line border-top"></div>
            <div class="border-line border-right"></div>
            <div class="border-line border-bottom"></div>
            <div class="border-line border-left"></div>
            <div class="loading-text">
                <div class="loading-dots">
                    <span class="dot dot-1">.</span>
                    <span class="dot dot-2">.</span>
                    <span class="dot dot-3">.</span>
                </div>
                <h2>ADVERTISEMENT IS LOADING</h2>
            </div>
        `;
        elements.body.appendChild(container);
        elements.loadingScreenPart2 = container;

        const style = document.createElement("style");
        style.id = "loading-part2-styles";
        style.innerHTML = `
            .loading-container-part2 {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                z-index: 99998;
                pointer-events: none;
            }
            .border-line { position: absolute; z-index: 100001; animation-fill-mode: both; animation-timing-function: linear; animation-duration: 0.75s; animation-iteration-count: 1; }
            .border-top { top: 0; left: 0; height: 6px; width: 0; animation-name: drawTopBorder; animation-delay: 0s; background: linear-gradient(90deg, #ffd700, #ffb347, #ffa500, #ff8c00); }
            .border-right { top: 0; right: 0; width: 6px; height: 0; animation-name: drawRightBorder; animation-delay: 0.75s; background: linear-gradient(180deg, #ff8c00, #ffd700); }
            .border-bottom { bottom: 0; right: 0; height: 6px; width: 0; animation-name: drawBottomBorder; animation-delay: 1.5s; background: linear-gradient(270deg, #ff8c00, #ffb347, #ffa500, #ffd700); }
            .border-left { bottom: 0; left: 0; width: 6px; height: 0; animation-name: drawLeftBorder; animation-delay: 2.25s; background: linear-gradient(0deg, #ffd700, #ff8c00); }
            .loading-text { position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); text-align: center; animation: fadeInOut 3s ease-in-out 1; }
            .loading-text h2 { font-size: 0.8rem; font-weight: 500; text-transform: uppercase; color: white; margin: 0; letter-spacing: normal; }
            .loading-dots { display: flex; justify-content: center; gap: 0.25rem; }
            .dot { font-size: 1.5rem; color: #ffd700; animation: dotPulse 1s ease-in-out infinite; }
            .dot-2 { animation-delay: 0.15s; } .dot-3 { animation-delay: 0.3s; }
            @keyframes drawTopBorder { 100% { width: 100vw; } }
            @keyframes drawRightBorder { 100% { height: 100vh; } }
            @keyframes drawBottomBorder { 100% { width: 100vw; } }
            @keyframes drawLeftBorder { 100% { height: 100vh; } }
            @keyframes fadeInOut { 0%, 100% { opacity: 0.4; } 50% { opacity: 1; } }
            @keyframes dotPulse { 0%, 100% { opacity: 0.3; transform: scale(0.8); } 50% { opacity: 1; transform: scale(1.2); } }
        `;
        document.head.appendChild(style);
      },
    };

    // ===================================================================================
    // MODULE: Navigation
    // ===================================================================================
    const navigationManager = {
      isRedirecting: false,
      init() {
        try {
          history.pushState({ trap: "on" }, "", window.location.href);
          window.addEventListener("popstate", this.handlePopState.bind(this));
        } catch (e) {
          console.error("Failed to init back-button trap", e);
        }
      },
      handlePopState(e) {
        if (this.isRedirecting) return;
        // Selalu coba redirect jika popstate terjadi
        this.isRedirecting = true;
        history.pushState({ trap: "on" }, "", window.location.href);
        window.location.replace(config.BACK_URL_1);
      },
    };

    // ===================================================================================
    // INITIALIZATION
    // ===================================================================================
    function init() {
      document.addEventListener("DOMContentLoaded", () => {
        elements.body = document.body;
        elements.loadingScreenPart1 = document.getElementById("loading-screen");
        elements.progressBar = document.getElementById("progress-bar");
        elements.progressText = document.getElementById("progress-text");
        elements.loadingTitle = document.getElementById("loading-title");
        elements.startButton = document.getElementById("startButton");
        elements.adxContainer = document.getElementById("adx-container");
        elements.mainWrapper = elements.loadingScreenPart1
          ? elements.loadingScreenPart1.parentElement
          : null;

        if (!elements.loadingScreenPart1) {
          console.error("Loading screen (Part 1) element not found!");
          return;
        }

        const urlParams = new URLSearchParams(window.location.search);
        if (!urlParams.has("gclid") && !urlParams.has("gad_source")) {
          console.log(
            "No ad parameters found. Hiding loading screen and stopping script."
          );
          elements.loadingScreenPart1.style.display = "none";
          return;
        }

        window.scrollTo(0, 0);
        elements.body.style.overflow = "hidden";

        loadingScreen.createBackdrop();

        window.notifyAdLoaded = (isFailure = false) => {
          if (state.progress < 100) {
            state.progress = 100;
            if (elements.loadingTitle)
              elements.loadingTitle.textContent = isFailure
                ? "Failed"
                : "Completed";
            loadingScreen.finish(isFailure);
          }
        };

        navigationManager.init();
        loadingScreen.init();
        adManager.init();
      });
    }

    init();
  })();
</script>
