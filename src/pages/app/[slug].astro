---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { getCollection } from "astro:content";
import AdSenseDisplay from "../../components/AdSenseDisplay.astro";
import AdManagerDisplay from "../../components/AdManagerDisplay.astro";
import UniversalAdScriptObfuscated from "../../components/UniversalAdScriptObfuscated.astro";
import siteConfig from "../../../site.json";
export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.id.replace(".md", "") },
    props: { post },
  }));
}

const { post } = Astro.props;
const { data } = post;
---

<Layout
  title={`${data.title} - ${siteConfig.site.name}`}
  description={data.summary
    .replace(/&amp;/g, "&")
    .replace(/&lt;/g, "<")
    .replace(/&gt;/g, ">")
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")}
  image={data.images[0]}
  keywords={`${data.title}, AI app, ${data.category}, artificial intelligence, mobile app, ${data.developer}`}
  canonical={`https://${siteConfig.site.domain}/app/${post.id.replace(".md", "")}`}
>
  <Header />

  <!-- App Hero Section -->
  <section
    class="relative overflow-hidden bg-gradient-to-br from-gray-950 via-black to-gray-900 py-20 text-white"
  >
    <!-- Background Header Image -->
    <div class="absolute inset-0">
      <img
        src={data.images[0].replace("-icon.webp", "-header.webp")}
        alt={`${data.title} background`}
        class="h-full w-full object-cover opacity-20 blur-sm"
        loading="lazy"
      />
      <!-- Dark overlay -->
      <div class="absolute inset-0 bg-black/70"></div>
    </div>

    <!-- Background Pattern -->
    <div
      class="absolute inset-0 bg-[radial-gradient(circle_at_30%_70%,rgba(255,215,0,0.1),transparent_50%)]"
    >
    </div>

    <div class="relative z-10 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 items-center gap-12 lg:grid-cols-2">
        <!-- App Info -->
        <div>
          <div class="mb-6 flex items-center space-x-3">
            <span
              class="rounded-full border border-yellow-500/30 bg-yellow-500/20 px-4 py-2 text-sm font-medium text-yellow-400"
            >
              {data.category}
            </span>
            <div class="flex items-center text-yellow-400">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
                ></path>
              </svg>
              <span class="ml-2 font-semibold text-white">{data.rating}</span>
            </div>
          </div>

          <h1 class="mb-6 text-4xl font-bold text-white md:text-6xl">
            {data.title}
          </h1>

          <p class="mb-8 text-xl leading-relaxed text-gray-300">
            {
              data.summary
                .replace(/&amp;/g, "&")
                .replace(/&lt;/g, "<")
                .replace(/&gt;/g, ">")
                .replace(/&quot;/g, '"')
                .replace(/&#39;/g, "'")
            }
          </p>

          <div class="mb-8 flex flex-wrap gap-6">
            <div
              class="flex items-center space-x-3 rounded-xl border border-gray-700 bg-gray-800/50 px-4 py-3 backdrop-blur-sm"
            >
              <svg
                class="h-5 w-5 text-yellow-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                ></path>
              </svg>
              <span class="text-gray-300">{data.developer}</span>
            </div>
            <div
              class="flex items-center space-x-3 rounded-xl border border-gray-700 bg-gray-800/50 px-4 py-3 backdrop-blur-sm"
            >
              <svg
                class="h-5 w-5 text-yellow-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                ></path>
              </svg>
              <span class="text-gray-300">{data.installs}</span>
            </div>
          </div>

          <div class="flex justify-center md:justify-start">
            <a
              href={`/premium-access?download=${post.id.replace(".md", "")}&gad_source=1`}
              class="transform rounded-2xl border-2 border-yellow-400 bg-gradient-to-r from-yellow-500 to-yellow-600 px-12 py-6 text-center text-2xl font-bold text-black shadow-2xl transition-all duration-300 hover:scale-110 hover:from-yellow-400 hover:to-yellow-500"
            >
              Get Premium Access
            </a>
          </div>
        </div>

        <!-- App Icon -->
        <div class="flex justify-center lg:justify-end">
          <div class="relative">
            <div class="relative">
              <img
                src={data.images[0]}
                alt={`${data.title} icon`}
                class="h-48 w-48 rounded-3xl object-cover shadow-2xl ring-4 ring-yellow-500 transition-all duration-500 group-hover:ring-yellow-500/50"
              />
              <div
                class="absolute -right-4 -bottom-4 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-600 p-3 shadow-2xl"
              >
                <svg
                  class="h-8 w-8 text-black"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"
                  ></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <AdManagerDisplay />

  <!-- App Screenshots -->
  {
    data.images.length > 2 && (
      <section class="bg-gray-900">
        <div class="relative">
          <div class="absolute inset-0 z-10 flex items-center justify-center bg-black/20">
            <h2 class="text-center text-4xl font-bold text-yellow-400 opacity-50 md:text-6xl">
              App Screenshots
            </h2>
          </div>
          <img
            src={data.images[2]}
            alt={`${data.title} screenshots`}
            class="h-auto w-full object-cover"
            loading="lazy"
          />
        </div>
      </section>
    )
  }

  <!-- App Content -->
  <section class="bg-gradient-to-br from-gray-900 via-black to-gray-800 py-20">
    <div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
      <!-- AI Review Section -->
      <div
        class="mb-8 rounded-2xl border border-gray-700 bg-gray-900/50 p-8 shadow-2xl backdrop-blur-sm"
      >
        <div class="prose prose-lg prose-invert prose-yellow max-w-none">
          <div set:html={post.body} />
        </div>
        <AdSenseDisplay />
      </div>

      <!-- App Description Section (Collapsible) -->
      <div
        class="overflow-hidden rounded-xl border border-gray-700 bg-gray-800/30 backdrop-blur-sm"
      >
        <button
          id="descriptionToggle"
          class="flex w-full items-center justify-between bg-gray-800/50 px-6 py-4 text-left transition-colors duration-200 hover:bg-gray-700/50"
        >
          <span class="text-lg font-semibold text-yellow-400"
            >App Description</span
          >
          <svg
            id="descriptionIcon"
            class="h-6 w-6 transform text-yellow-400 transition-transform duration-200"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        <div
          id="descriptionContent"
          class="max-h-32 overflow-hidden px-6 py-4 text-sm leading-relaxed text-gray-300 transition-all duration-300"
        >
          <div
            class="prose prose-invert prose-yellow prose-sm max-w-none"
            set:html={data.descriptionHTML}
          />
        </div>
      </div>
    </div>
  </section>

  <!-- Reviews Section -->
  {
    data.reviews && data.reviews.length > 0 && (
      <section class="bg-gradient-to-br from-gray-900 via-black to-gray-800 py-20">
        <div class="mx-auto max-w-3xl px-4 sm:px-6 lg:px-8">
          <h2 class="mb-12 text-center text-3xl font-bold text-white md:text-4xl">
            User Reviews
          </h2>
          <div class="space-y-6">
            {data.reviews.map((review, index) => (
              <div class="relative">
                <div class="flex items-start space-x-4">
                  {review.userImage && (
                    <div class="flex-shrink-0">
                      <img
                        src={review.userImage}
                        alt={review.userName}
                        class="h-12 w-12 rounded-full border-2 border-yellow-500/50 shadow-lg"
                        loading="lazy"
                      />
                    </div>
                  )}
                  <div class="min-w-0 flex-1">
                    <div class="relative rounded-2xl border border-gray-600/50 bg-gradient-to-r from-gray-800/80 to-gray-700/80 p-6 shadow-xl backdrop-blur-sm">
                      <div class="absolute -top-2 left-6 h-4 w-4 rotate-45 transform border-t border-l border-gray-600/50 bg-gradient-to-r from-gray-800/80 to-gray-700/80" />
                      <div class="mb-3 flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-yellow-400">
                          {review.userName}
                        </h3>
                        <div class="flex text-yellow-400">
                          {[...Array(5)].map((_, i) => (
                            <svg
                              class={`h-4 w-4 ${i < review.score ? "text-yellow-400" : "text-gray-600"}`}
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                          ))}
                        </div>
                      </div>
                      <p class="text-base leading-relaxed text-gray-200">
                        {review.text}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    )
  }

  <!-- CTA Section -->
  <section
    class="relative overflow-hidden bg-gradient-to-br from-gray-950 via-black to-gray-900 py-20 text-white"
  >
    <!-- Background Pattern -->
    <div
      class="absolute inset-0 bg-[radial-gradient(circle_at_70%_30%,rgba(255,215,0,0.1),transparent_50%)]"
    >
    </div>

    <div
      class="relative z-10 mx-auto max-w-4xl px-4 text-center sm:px-6 lg:px-8"
    >
      <h2 class="mb-6 text-3xl font-bold md:text-4xl">
        Ready to Try {data.title}?
      </h2>
      <p class="mb-8 text-xl text-gray-300">
        Join thousands of users who have already discovered this amazing AI
        application
      </p>
      <a
        href={`/premium-access?download=${post.id.replace(".md", "")}&gad_source=1`}
        class="inline-block transform rounded-xl bg-gradient-to-r from-yellow-500 to-yellow-600 px-8 py-4 text-lg font-bold text-black shadow-2xl transition-all duration-300 hover:scale-105 hover:from-yellow-400 hover:to-yellow-500"
      >
        GET PREMIUM ACCESS NOW!
      </a>
    </div>
  </section>

  <UniversalAdScriptObfuscated />

  <Footer />
</Layout>

<script>
  // Collapsible description functionality
  document.addEventListener("DOMContentLoaded", function () {
    const toggle = document.getElementById("descriptionToggle");
    const content = document.getElementById("descriptionContent");
    const icon = document.getElementById("descriptionIcon");

    if (toggle && content && icon) {
      // Set initial state to show partial content
      content.style.maxHeight = "8rem"; // 32 = 8rem
      icon.style.transform = "rotate(0deg)";

      toggle.addEventListener("click", function () {
        const isExpanded =
          content.style.maxHeight !== "8rem" && content.style.maxHeight !== "";

        if (isExpanded) {
          content.style.maxHeight = "8rem";
          icon.style.transform = "rotate(0deg)";
        } else {
          content.style.maxHeight = content.scrollHeight + "px";
          icon.style.transform = "rotate(180deg)";
        }
      });
    }
  });

  // Smooth scrolling for anchor links
  document.addEventListener("DOMContentLoaded", function () {
    const links = document.querySelectorAll('a[href^="#"]');

    links.forEach((link) => {
      link.addEventListener("click", (e: Event) => {
        e.preventDefault();

        const targetId = (e.target as HTMLAnchorElement)
          .getAttribute("href")
          ?.substring(1);
        if (!targetId) return;

        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          const headerHeight =
            document.querySelector("header")?.offsetHeight || 0;
          const targetPosition = targetElement.offsetTop - headerHeight - 20;

          window.scrollTo({
            top: targetPosition,
            behavior: "smooth",
          });
        }
      });
    });
  });
</script>
